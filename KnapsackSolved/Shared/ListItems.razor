
<div class="font">
    <h3>Itens: </h3>
    @foreach (var item in listItems)
    {
        <div class="list-items">
            <div class="item">
                <p>Nome: @item.Name</p>
                <p>Custo: @item.Cost</p>
                <p>Valor: @item.Value</p>
            </div>
        </div>

    }

    <div class="values">
        <p>Valor máximo: <input class="input-value" @bind="maxCost" @bind:event="oninput" /></p>
        <p>Tamanho da população: <input class="input-value" @bind="popSize" @bind:event="oninput" /></p>
        <p>Probabilidade de cruzamento: <input class="input-value" @bind="crossoverProb" @bind:event="oninput" /></p>
        <p>Probabilidade de mutação: <input class="input-value" @bind="mutationProb" @bind:event="oninput" /></p>
        <p>Número de gerações: <input class="input-value" @bind="generate" @bind:event="oninput" /></p>
    </div>
</div>

<button class="btn-solve" @onclick="@(() => SolverKnapsack(maxCost, popSize, crossoverProb, mutationProb, generate))">Resolver</button>

@if (solved)
{
    <div>
        <p>Solved</p>
    </div>
}


@code{

    List<Item> listItems;
    Knapsack knap;
    bool solved = false;

    public int maxCost { get; set; }
    public int popSize { get; set; }
    public int crossoverProb { get; set; }
    public int mutationProb { get; set; }
    public int generate { get; set; }

    protected override void OnInitialized()
    {
        listItems = new List<Item>()
        {
            new Item()
            {
                Name = "TV",
                Cost = 5,
                Value = 6
            },
            new Item()
            {
                Name = "Cadeira",
                Cost = 6,
                Value = 8
            },
            new Item()
            {
                Name = "Garrafa de água",
                Cost = 7,
                Value = 8
            }
        };

        base.OnInitialized();
    }

    int SolverKnapsack(int maxCost, int popSize, int crossoverProb, int mutationProb, int generate)
    {
        knap = new Knapsack(maxCost, popSize, crossoverProb, mutationProb, 1, generate, listItems);
        solved = true;
        return knap.Solver();
    }
}