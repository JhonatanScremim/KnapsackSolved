
<div>
    <h3>Itens</h3>
    @foreach (var item in listItems)
    {
        <div>
            <p>Nome: @item.Name</p>
            <p>Custo: @item.Cost</p>
            <p>Valor: @item.Value</p>
            <p>------------------------------------------------------------------</p>
        </div>
    }
    <p>Valor máximo</p>
    <input @bind="maxCost" @bind:event="oninput" />
    <p>Tamanho da população</p>
    <input @bind="popSize" @bind:event="oninput" />
    <p>Probabilidade de cruzamento</p>
    <input @bind="crossoverProb" @bind:event="oninput" />
    <p>Probabilidade de mutação</p>
    <input @bind="mutationProb" @bind:event="oninput" />
    <p>Número de gerações</p>
    <input @bind="generate" @bind:event="oninput" />

</div>

<button @onclick="@(() => Console.WriteLine(SolverKnapsack(maxCost, popSize, crossoverProb, mutationProb, generate)))">Resolver</button>

@code{

    List<Item> listItems;
    Knapsack knap;

    public int maxCost { get; set; }
    public int popSize { get; set; }
    public int crossoverProb { get; set; }
    public int mutationProb { get; set; }
    public int generate { get; set; }

    protected override void OnInitialized()
    {
        listItems = new List<Item>()
        {
            new Item()
            {
                Name = "TV",
                Cost = 5,
                Value = 6
            },
            new Item()
            {
                Name = "Cadeira",
                Cost = 6,
                Value = 8
            },
            new Item()
            {
                Name = "Garrafa de água",
                Cost = 7,
                Value = 8
            }
        };

        base.OnInitialized();
    }

    int SolverKnapsack(int maxCost , int popSize, int crossoverProb, int mutationProb, int generate)
    {
        knap = new Knapsack(maxCost, popSize, crossoverProb, mutationProb, 1, generate, listItems);
        return knap.Solver();
    }
}