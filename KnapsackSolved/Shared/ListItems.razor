
<div class="font">
    <h3>Itens: </h3>
    @foreach (var item in listItems)
    {
        <div class="list-items">
            <div class="item">
                <p>Nome: @item.Name</p>
                <p>Custo: @item.Cost</p>
                <p>Valor: @item.Value</p>
            </div>
        </div>

    }

    <div class="values">
        <p>Valor máximo: <input class="input-value" @bind="@maxCost" @bind:event="oninput"/></p>
        <p>Tamanho da população: <input class="input-value" @bind="@popSize" @bind:event="oninput"/></p>
        <p>Probabilidade de cruzamento: <input class="input-value" @bind="@crossoverProb" @bind:event="oninput" type="range" max="100" min="0" step="5"/>@(crossoverProb/100)</p>
        <p>Probabilidade de mutação: <input class="input-value" @bind="@mutationProb" @bind:event="oninput" type="range" max="100" min="0" step="5" />@(mutationProb/100)</p>
        <p>Número de gerações: <input class="input-value" @bind="@generate" @bind:event="oninput" /></p>
    </div>
</div>

<button class="btn-solve" @onclick="@(() => result = SolverKnapsack(maxCost, popSize, crossoverProb/100, mutationProb/100, generate))">Resolver</button>

@if (solved)
{
<div>
    <p>Solved</p>
    <p>Generation: @result.Generation</p>
    <p>Items: </p>
    @foreach (var item in @result.Items)
    {
        <div class="list-items">
            <div class="item">
                <p>Nome: @item.Name</p>
                <p>Custo: @item.Cost</p>
                <p>Valor: @item.Value</p>
            </div>
        </div>

    }
    <p>TotalCost: @result.TotalCost</p>
    <p>TotalValue: @result.TotalValue</p>
</div>
}


@code{

    List<Item> listItems;
    Knapsack knap;
    bool solved = false;
    Result result;

    public int maxCost { get; set; } = 20;
    public int popSize { get; set; } = 10;
    public double crossoverProb { get; set; } = 70;
    public double mutationProb { get; set; } = 10;
    public int generate { get; set; } = 20;

    protected override void OnInitialized()
    {
        listItems = new List<Item>()
        {
            new Item() { Name = "Phone", Cost = 8, Value = 7 },
            new Item() { Name = "Apple", Cost = 4, Value = 5 },
            new Item() { Name = "Book", Cost = 4, Value = 6 },
            new Item() { Name = "Game", Cost = 4, Value = 6 },
            new Item() { Name = "TV", Cost = 6, Value = 6 },
            new Item() { Name = "Manga", Cost = 1, Value = 8 },
            new Item() { Name = "Banana", Cost = 5, Value = 4},
            new Item() { Name = "Keyboard", Cost = 3, Value = 4 },
            new Item() { Name = "Mouse", Cost = 7, Value = 2 },
            new Item() { Name = "Cellphone", Cost = 2, Value = 5}
        };

        base.OnInitialized();
    }

    Result SolverKnapsack(int maxCost, int popSize, double crossoverProb, double mutationProb, int generate)
    {
        knap = new Knapsack(maxCost, popSize, crossoverProb, mutationProb, 1, generate, listItems);
        solved = true;
        return knap.Solver();
    }
}